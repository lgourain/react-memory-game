{"version":3,"sources":["GuessCount.js","Card.js","HallOfFame.js","HighScoreInput.js","App.js","index.js"],"names":["GuessCount","_ref","guesses","react_default","a","createElement","className","Card","card","feedback","index","onClick","concat","HallOfFame","entries","map","_ref2","date","id","player","key","HOF_KEY","HOF_MAX_SIZE","HighScoreInput","state","winner","handleWinnerUpdate","event","_this","setState","target","value","toUpperCase","persistWinner","preventDefault","entry","onStored","Date","toLocaleDateString","now","JSON","parse","localStorage","getItem","insertionPoint","findIndex","_ref3","push","splice","length","setItem","stringify","saveHOFEntry","props","onSubmit","this","type","autoComplete","onChange","Component","App","cards","generateCards","currentPair","hallOfFame","matchedCardIndices","handleCardClick","handleNewPairClosedBy","displayHallOfFame","result","candidates","shuffle","SIDE","pop","_this$state","indexMatched","includes","_this2","_this$state2","newPair","newGuesses","matched","Object","toConsumableArray","setTimeout","_this3","_this$state3","won","src_GuessCount_0","src_Card_0","getFeedbackForCard","src_HallOfFame_0","src_HighScoreInput_0","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.3f43befd.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './GuessCount.css'\n\nconst GuessCount = ({ guesses }) => <div className=\"guesses\">{guesses}</div>\n\nGuessCount.propTypes = {\n    guesses: PropTypes.number.isRequired,\n}\n\nexport default GuessCount\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Card.css'\n\nconst HIDDEN_SYMBOL = '❓'\n\nconst Card = ({card, feedback, index, onClick}) => (\n    <div className={`card ${feedback}`} onClick={() => onClick(index)}>\n        <span className=\"symbol\">\n            {feedback === 'hidden' ? HIDDEN_SYMBOL : card}\n        </span>\n    </div>\n);\n\nCard.propTypes = {\n    card: PropTypes.string.isRequired,\n    feedback: PropTypes.oneOf([\n        'hidden',\n        'justMatched',\n        'justMismatched',\n        'visible',\n    ]).isRequired,\n    index: PropTypes.number.isRequired,\n    onClick: PropTypes.func.isRequired,\n}\n\nexport default Card\n","import PropTypes from 'prop-types'\nimport React from 'react'\n\nimport './HallOfFame.css'\n\nconst HallOfFame = ({ entries }) => (\n  <table className=\"hallOfFame\">\n    <tbody>\n      {entries.map(({ date, guesses, id, player }) => (\n        <tr key={id}>\n          <td className=\"date\">{date}</td>\n          <td className=\"guesses\">{guesses}</td>\n          <td className=\"player\">{player}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n)\n\nHallOfFame.propTypes = {\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      guesses: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      player: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n}\n\nexport default HallOfFame\n\nconst HOF_KEY = '::Memory::HallofFame'\nconst HOF_MAX_SIZE = 10\n\nexport function saveHOFEntry(entry, onStored) {\n  entry.date = new Date().toLocaleDateString()\n  entry.id = Date.now()\n\n  const entries = JSON.parse(localStorage.getItem(HOF_KEY) || '[]')\n  const insertionPoint = entries.findIndex(\n    ({ guesses }) => guesses >= entry.guesses\n  )\n\n  if (insertionPoint === -1) {\n    entries.push(entry)\n  } else {\n    entries.splice(insertionPoint, 0, entry)\n  }\n  if (entries.length > HOF_MAX_SIZE) {\n    entries.splice(HOF_MAX_SIZE, entries.length)\n  }\n\n  localStorage.setItem(HOF_KEY, JSON.stringify(entries))\n  onStored(entries)\n}\n","import PropTypes from 'prop-types'\nimport React, { Component } from 'react'\n\nimport './HighScoreInput.css'\n\nimport { saveHOFEntry } from './HallOfFame'\n\nclass HighScoreInput extends Component {\n  state = { winner: '' }\n\n  // Arrow fx for binding\n  handleWinnerUpdate = (event) => {\n    this.setState({ winner: event.target.value.toUpperCase() })\n  }\n\n  // Arrow fx for binding\n  persistWinner = (event) => {\n    event.preventDefault()\n    const newEntry = { guesses: this.props.guesses, player: this.state.winner }\n    saveHOFEntry(newEntry, this.props.onStored)\n  }\n\n  render() {\n    return (\n      <form className=\"highScoreInput\" onSubmit={this.persistWinner}>\n        <p>\n          <label>\n            Bravo ! Entre ton prénom :\n            <input \n              type=\"text\" \n              autoComplete=\"given-name\"\n              onChange={this.handleWinnerUpdate} \n              value={this.state.winner}\n            />\n          </label>\n          <button type=\"submit\">J’ai gagné !</button>\n        </p>\n      </form>\n    )\n  }\n}\n\nHighScoreInput.propTypes = {\n  guesses: PropTypes.number.isRequired,\n  onStored: PropTypes.func.isRequired,\n}\n\nexport default HighScoreInput\n","import React, { Component } from 'react'\nimport shuffle from 'lodash.shuffle'\n\nimport './App.css'\n\nimport GuessCount from './GuessCount';\nimport Card from './Card';\nimport HallOfFame from './HallOfFame'\nimport HighScoreInput from './HighScoreInput'\n\nconst SIDE = 6\nexport const SYMBOLS = '😀🎉💖🎩🐶🐱🦄🐬🌍🌛🌞💫🍎🍌🍓🍐🍟🍿'\nconst VISUAL_PAUSE_MSECS = 750\n\nclass App extends Component {\n  state = {\n    cards: this.generateCards(),\n    currentPair: [],\n    guesses: 0,\n    hallOfFame: null,\n    matchedCardIndices: [],\n  }\n\n  generateCards() {\n    const result = []\n    const size = SIDE * SIDE\n    const candidates = shuffle(SYMBOLS)\n\n    while (result.length < size) {\n      const card = candidates.pop()\n      result.push(card, card)\n    }\n    return shuffle(result)\n  }\n\n  getFeedbackForCard(index) {\n    const { currentPair, matchedCardIndices } = this.state\n    const indexMatched = matchedCardIndices.includes(index)\n\n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\n    }\n\n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched'\n    }\n\n    return indexMatched ? 'visible' : 'hidden'\n  }\n\n  // Arrow fx for binding\n  handleCardClick = index => {\n    const { currentPair } = this.state\n\n    if (currentPair.length === 2) {\n      return\n    }\n\n    if (currentPair.length === 0) {\n      this.setState({ currentPair: [index] })\n      return\n    }\n\n    this.handleNewPairClosedBy(index)\n  }\n\n  handleNewPairClosedBy(index) {\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state\n\n    const newPair = [currentPair[0], index]\n    const newGuesses = guesses + 1\n    const matched = cards[newPair[0]] === cards[newPair[1]]\n    this.setState({ currentPair: newPair, guesses: newGuesses })\n    if (matched) {\n      this.setState({ matchedCardIndices: [...matchedCardIndices, ...newPair] })\n    }\n    setTimeout(() => this.setState({ currentPair: [] }), VISUAL_PAUSE_MSECS)\n  }\n\n  // Arrow fx for binding\n  displayHallOfFame = (hallOfFame) => {\n    this.setState({ hallOfFame })\n  }\n\n  render() {\n    const { cards, guesses, hallOfFame, matchedCardIndices } = this.state\n    const won = matchedCardIndices.length === cards.length\n    return (\n      <div className=\"memory\">\n        <GuessCount guesses={guesses} />\n        {cards.map((card, index) => (\n          <Card \n            card={card} \n            feedback={this.getFeedbackForCard(index)}\n            index={index}\n            key={index}\n            onClick={this.handleCardClick} />\n        ))}\n        {won && \n          (hallOfFame ? (\n            <HallOfFame entries={hallOfFame} />\n          ) : (\n            <HighScoreInput guesses={guesses} onStored={this.displayHallOfFame} />\n          ))\n        }\n      </div>\n    )\n  }\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}